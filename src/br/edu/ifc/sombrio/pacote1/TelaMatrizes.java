package br.edu.ifc.sombrio.pacote1;

import javax.swing.table.DefaultTableModel;

public class TelaMatrizes extends javax.swing.JFrame {

    /**
     * Creates new form TelaPrincipal
     */
    public TelaMatrizes() {
        initComponents();
        inversa2.setEnabled(false);
        inversa1.setEnabled(false);
        jScrollPane7.setVisible(false);
        jScrollPane8.setVisible(false);
        calculoCramer.setVisible(false);
        calculoCramer2.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        rMatriz2 = new javax.swing.JLabel();
        rMatriz1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        determinante2 = new javax.swing.JButton();
        inversa2 = new javax.swing.JButton();
        transposta2 = new javax.swing.JButton();
        cramer2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        determinante1 = new javax.swing.JButton();
        transposta1 = new javax.swing.JButton();
        inversa1 = new javax.swing.JButton();
        cramer = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        multiplicar = new javax.swing.JButton();
        somar = new javax.swing.JButton();
        subtrair = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        ordemI = new javax.swing.JTextField();
        ordemJ = new javax.swing.JTextField();
        gerador = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        limpar1 = new javax.swing.JButton();
        calculoCramer = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        ordemI2 = new javax.swing.JTextField();
        ordemJ2 = new javax.swing.JTextField();
        gerador2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        limpar2 = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        tInd2 = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        tInd1 = new javax.swing.JTable();
        calculoCramer2 = new javax.swing.JButton();
        trocar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jLabel4.setIcon(new javax.swing.ImageIcon("E:\\José Norberto\\Documents\\Trabalhos e tarefas - IFC\\Projetinhos\\Matemática - matrizes\\Logo_IF.jpg")); // NOI18N

        rMatriz2.setOpaque(true);

        rMatriz1.setOpaque(true);

        jLabel7.setForeground(new java.awt.Color(255, 0, 0));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        determinante2.setText("Determinante");
        determinante2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                determinante2ActionPerformed(evt);
            }
        });

        inversa2.setText("Inversa");
        inversa2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inversa2ActionPerformed(evt);
            }
        });

        transposta2.setText("Transposta");
        transposta2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transposta2ActionPerformed(evt);
            }
        });

        cramer2.setText("Cramer");
        cramer2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cramer2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(determinante2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(transposta2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(inversa2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cramer2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(determinante2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(inversa2)
                .addGap(18, 18, 18)
                .addComponent(transposta2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(cramer2))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        determinante1.setText("Determinante");
        determinante1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                determinante1ActionPerformed(evt);
            }
        });

        transposta1.setText("Transposta");
        transposta1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transposta1ActionPerformed(evt);
            }
        });

        inversa1.setText("Inversa");

        cramer.setText("Cramer");
        cramer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cramerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(determinante1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(inversa1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(transposta1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cramer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(determinante1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(inversa1)
                .addGap(18, 18, 18)
                .addComponent(transposta1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(cramer))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        multiplicar.setText("Multiplicar");
        multiplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplicarActionPerformed(evt);
            }
        });

        somar.setText("Somar");
        somar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                somarActionPerformed(evt);
            }
        });

        subtrair.setText("Subtrair");
        subtrair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subtrairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(multiplicar)
                .addGap(18, 18, 18)
                .addComponent(somar)
                .addGap(18, 18, 18)
                .addComponent(subtrair))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(multiplicar)
                    .addComponent(somar)
                    .addComponent(subtrair))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        gerador.setText("Gerar");
        gerador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geradorActionPerformed(evt);
            }
        });

        jLabel2.setText("Ordem (i)");

        jLabel1.setText("Ordem (j)");

        limpar1.setText("Limpar");
        limpar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpar1ActionPerformed(evt);
            }
        });

        calculoCramer.setText("Calcular");
        calculoCramer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculoCramerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(calculoCramer, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(limpar1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ordemI, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gerador)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ordemJ, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel2)
                .addComponent(ordemI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(gerador)
                .addComponent(ordemJ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel1)
                .addComponent(limpar1)
                .addComponent(calculoCramer))
        );

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));

        jLabel5.setText("Ordem (i)");

        gerador2.setText("Gerar");
        gerador2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gerador2ActionPerformed(evt);
            }
        });

        jLabel6.setText("Ordem (j)");

        limpar2.setText("Limpar");
        limpar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpar2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ordemI2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gerador2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ordemJ2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(limpar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(limpar2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel5)
                .addComponent(ordemI2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(gerador2)
                .addComponent(ordemJ2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel6))
        );

        tInd2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane7.setViewportView(tInd2);

        tInd1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane8.setViewportView(tInd1);

        calculoCramer2.setText("Calcular");
        calculoCramer2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculoCramer2ActionPerformed(evt);
            }
        });

        trocar.setText("<->");
        trocar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trocarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 19, Short.MAX_VALUE)
                                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(calculoCramer2))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(397, 397, 397)
                                .addComponent(trocar))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(rMatriz1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(36, 36, 36)
                                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(42, 42, 42))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)))
                                .addComponent(rMatriz2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(235, 235, 235)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(trocar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 6, Short.MAX_VALUE)
                                        .addComponent(rMatriz1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(37, 37, 37)
                                        .addComponent(jLabel4))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap())))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(rMatriz2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(calculoCramer2)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void somarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_somarActionPerformed
        // TODO add your handling code here:
        if (Integer.parseInt(ordemI.getText()) == Integer.parseInt(ordemI2.getText()) && Integer.parseInt(ordemJ.getText()) == Integer.parseInt(ordemJ2.getText())){
            double matriz1[][] = new double[Integer.parseInt(ordemI.getText())][Integer.parseInt(ordemJ.getText())];
            double matriz2[][] = new double[Integer.parseInt(ordemI.getText())][Integer.parseInt(ordemJ.getText())];
            double resultado[][] = new double[Integer.parseInt(ordemI.getText())][Integer.parseInt(ordemJ.getText())];
            for (int i = 0; i < Integer.parseInt(ordemI.getText()); i++){
                for (int j = 0; j < Integer.parseInt(ordemJ.getText()); j++){
                    matriz1[i][j] = Double.parseDouble(jTable1.getValueAt(i, j).toString());
                    matriz2[i][j] = Double.parseDouble(jTable2.getValueAt(i, j).toString());
                }
            }
            String resul = "<html><body>";
            for (int i = 0; i < Integer.parseInt(ordemI.getText()); i++) {
                for (int j = 0; j < Integer.parseInt(ordemJ.getText()); j++) {
                    resultado[i][j] = matriz1[i][j] + matriz2[i][j];
                    resul += resultado[i][j] + " ";
                }
                resul += "<br>";
            }
            resul += "</body></html>";
            jLabel3.setText(resul);
        } else{
            jLabel7.setText("As matrizes tem de ser de mesma ordem!");
        }

    }//GEN-LAST:event_somarActionPerformed

    private void subtrairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subtrairActionPerformed
        // TODO add your handling code here:
        if (Integer.parseInt(ordemI.getText()) == Integer.parseInt(ordemI2.getText()) && Integer.parseInt(ordemJ.getText()) == Integer.parseInt(ordemJ2.getText())){
            double matriz1[][] = new double[Integer.parseInt(ordemI.getText())][Integer.parseInt(ordemJ.getText())];
            double matriz2[][] = new double[Integer.parseInt(ordemI2.getText())][Integer.parseInt(ordemJ2.getText())];
            double resultado[][] = new double[Integer.parseInt(ordemI.getText())][Integer.parseInt(ordemJ.getText())];
            for (int i = 0; i < Integer.parseInt(ordemI.getText()); i++){
                for (int j = 0; j < Integer.parseInt(ordemJ.getText()); j++){
                    matriz1[i][j] = Double.parseDouble(jTable1.getValueAt(i, j).toString());
                    matriz2[i][j] = Double.parseDouble(jTable2.getValueAt(i, j).toString());
                }
            }
            String resul = "<html><body>";
            for (int i = 0; i < Integer.parseInt(ordemI.getText()); i++) {
                for (int j = 0; j < Integer.parseInt(ordemJ.getText()); j++) {
                    resultado[i][j] = matriz1[i][j] - matriz2[i][j];
                    resul += resultado[i][j] + " ";
                }
                resul += "<br>";
            }
            resul += "</body></html>";
            jLabel3.setText(resul);
        } else{
            jLabel7.setText("As matrizes tem de ser de mesma ordem!");
        }
    }//GEN-LAST:event_subtrairActionPerformed

    private void determinante2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_determinante2ActionPerformed
        // TODO add your handling code here:
        if (Integer.parseInt(ordemI2.getText()) == Integer.parseInt(ordemJ2.getText())){
            double determinante = 0;
            //System.out.print("Digite a ordem da matriz (Determinante não pode ser tirada de uma matriz não quadrada): ");
            int ordem = Integer.parseInt(ordemI2.getText());
            double a[] = new double[ordem];//Cofator
            //int matriz[][] = new int[ordem][ordem];
            double matriz[][] = new double[ordem][ordem];
            double d[] = new double[ordem];//Menor Complementar
            double matrizMenor[][] = new double[ordem][ordem];

            for (int i = 0; i < ordem; i++) {
                for (int j = 0; j < ordem; j++) {
                    //System.out.print("Digite o valor do elemento a" + (i + 1) + (j + 1) + ": ");
                    matriz[i][j] = Double.parseDouble(jTable2.getValueAt(i, j).toString());
                }
            }

            if (ordem == 2) {
                determinante = matriz[0][0] * matriz[1][1] - (matriz[0][1] * matriz[1][0]);

                String resul = "<html><body>";
                resul += determinante;
                resul += "</body></html>";
                rMatriz2.setText(resul);
            } else {
                if (ordem == 3) {
                    determinante = ((matriz[0][0] * matriz[1][1] * matriz[2][2])
                            + (matriz[0][1] * matriz[1][2] * matriz[2][0])
                            + (matriz[0][2] * matriz[1][0] * matriz[2][1]))
                            - ((matriz[2][0] * matriz[1][1] * matriz[0][2])
                            + (matriz[2][1] * matriz[1][2] * matriz[0][0])
                            + (matriz[2][2] * matriz[1][0] * matriz[0][1]));
                    String resul = "<html><body>";
                    resul += determinante;
                    resul += "</body></html>";
                    rMatriz2.setText(resul);
                } else {
                    if (ordem > 4) {
                        jLabel7.setText("Determinante de ordem maior que 4 indisponível!");
                        /*int z2 = 0;
                        for (int linha = 1; linha < ordemI; linha++) {
                            for (int coluna = 0; coluna < ordemI; coluna++) {
                                if (coluna == 0) {
                                    coluna++;
                                } else if (coluna == 1) {

                                } else if (coluna == 2) {

                                } else if (coluna == 3) {

                                }

                                matrizMenor[linha - 1][coluna - 1] = matriz[linha][coluna];
                                /*for(int z = 0; z < ordem; z++){
                                    if (linha != coluna && linha != 0 && coluna != 0 && i2 != 3 && j2 != 3){
                                        matrizMenor[i2][j2] = matriz[linha][coluna];

                                        //System.out.println("Matriz secundária: " + matrizMenor[i][j]);
                                        //System.out.print((i + 1) + " " + (j + 1) + " " + (z + 1) + " - ");
                                    }
                                    //System.out.println((i + 1) + " " + (j + 1) + " " + (z + 1));
                                    System.out.print(matrizMenor[linha][coluna] + " ");
                                    z2 = z;
                                    j2++;
                                }*/
     /*if(i != z2 && j != 0){
                                    System.out.println("");
                                }

                                d[linha] = ((matrizMenor[0][0] * matrizMenor[1][1] * matrizMenor[2][2]) + (matrizMenor[0][1] * matrizMenor[1][2] * matrizMenor[2][0]) + (matrizMenor[0][2] * matrizMenor[1][0] * matrizMenor[2][1])) - ((matrizMenor[2][0] * matrizMenor[1][1] * matrizMenor[0][2]) + (matrizMenor[2][1] * matrizMenor[1][2] * matrizMenor[0][0]) + (matrizMenor[2][2] * matrizMenor[1][0] * matrizMenor[0][1]));
                                //System.out.println("Menor complementar: " + d[i]);
                                //System.out.println("");
                            }

                            a[linha] = (Math.pow(-1, (1 + (1 + linha))) * d[linha]);
                            determinante += matriz[0][linha] * a[linha];
                            System.out.println("Cofator: " + a[linha] + " - Menor Complementar: " + d[linha]);

                        }
                        System.out.println("Determinante dessa matriz: " + determinante);*/
                    }
                }
            }
        } else{
            jLabel7.setText("A matriz deve ser quadrada (i = j)!");
        }
    }//GEN-LAST:event_determinante2ActionPerformed

    private void geradorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geradorActionPerformed
        // TODO add your handling code here:
        // jTable1.getColumnModel().re
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();

        for (int i = 0; i < Integer.parseInt(ordemJ.getText()); i++) {
            dtm.addColumn("");
        }
        for (int i = 0; i < Integer.parseInt(ordemI.getText()); i++) {
            dtm.addRow(new Object[]{null});
        }
    }//GEN-LAST:event_geradorActionPerformed

    private void transposta2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transposta2ActionPerformed
        // TODO add your handling code here:
        double matriz[][] = new double[Integer.parseInt(ordemI2.getText())][Integer.parseInt(ordemJ2.getText())];
        double matrizT[][] = new double[matriz.length][matriz.length];
        for (int i = 0; i < Integer.parseInt(ordemI2.getText()); i++){
            for (int j = 0; j < Integer.parseInt(ordemJ2.getText()); j++){
                matriz[i][j] = Double.parseDouble(jTable2.getValueAt(i, j).toString());
            }
        }
        String resul = "<html><body>";
        for(int i = 0; i < Integer.parseInt(ordemI2.getText()); i++){
            for(int j = 0; j < Integer.parseInt(ordemJ2.getText()); j++){
                matrizT[i][j] = matriz[j][i];
                
                resul += matrizT[i][j] + " ";
            }
            resul += "<br>";
        }
        resul += "</body></html>";
        rMatriz2.setText(resul); 
    }//GEN-LAST:event_transposta2ActionPerformed

    private void gerador2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gerador2ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel) jTable2.getModel();

        jTable2.setModel(dtm);
        for (int i = 0; i < Integer.parseInt(ordemJ2.getText()); i++) {
            dtm.addColumn("");
        }
        for (int i = 0; i < Integer.parseInt(ordemI2.getText()); i++) {
            dtm.addRow(new Object[]{null});
        }
    }//GEN-LAST:event_gerador2ActionPerformed
        
    private void transposta1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transposta1ActionPerformed
        // TODO add your handling code here:
        double matriz[][] = new double[Integer.parseInt(ordemI.getText())][Integer.parseInt(ordemJ.getText())];
        double matrizT[][] = new double[matriz.length][matriz.length];
        for (int i = 0; i < Integer.parseInt(ordemI.getText()); i++){
            for (int j = 0; j < Integer.parseInt(ordemJ.getText()); j++){
                matriz[i][j] = Double.parseDouble(jTable1.getValueAt(i, j).toString());
            }
        }
        String resul = "<html><body>";
        for(int i = 0; i < Integer.parseInt(ordemI.getText()); i++){
            for(int j = 0; j < Integer.parseInt(ordemJ.getText()); j++){
                matrizT[i][j] = matriz[j][i];                
                resul += matrizT[i][j] + " ";
            }
            resul += "<br>";
        }
        resul += "</body></html>";
        rMatriz1.setText(resul); 
    }//GEN-LAST:event_transposta1ActionPerformed

    private void determinante1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_determinante1ActionPerformed
        // TODO add your handling code here:
        if (Integer.parseInt(ordemI.getText()) == Integer.parseInt(ordemJ.getText())){
            double determinante = 0;
            //System.out.print("Digite a ordem da matriz (Determinante não pode ser tirada de uma matriz não quadrada): ");
            int ordem = Integer.parseInt(ordemI.getText());
            double a[] = new double[ordem];//Cofator
            //int matriz[][] = new int[ordem][ordem];
            double matriz[][] = new double[ordem][ordem];
            double d[] = new double[ordem];//Menor Complementar
            double matrizMenor[][] = new double[ordem][ordem];

            for (int i = 0; i < ordem; i++) {
                for (int j = 0; j < ordem; j++) {
                    //System.out.print("Digite o valor do elemento a" + (i + 1) + (j + 1) + ": ");
                    matriz[i][j] = Double.parseDouble(jTable1.getValueAt(i, j).toString());
                }
            }

            if (ordem == 2) {
                determinante = matriz[0][0] * matriz[1][1] - (matriz[0][1] * matriz[1][0]);

                String resul = "<html><body>";
                resul += determinante;
                resul += "</body></html>";
                rMatriz1.setText(resul);
            } else {
                if (ordem == 3) {
                    determinante = ((matriz[0][0] * matriz[1][1] * matriz[2][2])
                            + (matriz[0][1] * matriz[1][2] * matriz[2][0])
                            + (matriz[0][2] * matriz[1][0] * matriz[2][1]))
                            - ((matriz[2][0] * matriz[1][1] * matriz[0][2])
                            + (matriz[2][1] * matriz[1][2] * matriz[0][0])
                            + (matriz[2][2] * matriz[1][0] * matriz[0][1]));
                    String resul = "<html><body>";
                    resul += determinante;
                    resul += "</body></html>";
                    rMatriz1.setText(resul);
                } else {
                    if (ordem > 4) {
                        jLabel7.setText("Determinante de ordem acima de 4 indisponível!");
                        /*int z2 = 0;
                        for (int linha = 1; linha < ordemI; linha++) {
                            for (int coluna = 0; coluna < ordemI; coluna++) {
                                if (coluna == 0) {
                                    coluna++;
                                } else if (coluna == 1) {

                                } else if (coluna == 2) {

                                } else if (coluna == 3) {

                                }

                                matrizMenor[linha - 1][coluna - 1] = matriz[linha][coluna];
                                /*for(int z = 0; z < ordem; z++){
                                    if (linha != coluna && linha != 0 && coluna != 0 && i2 != 3 && j2 != 3){
                                        matrizMenor[i2][j2] = matriz[linha][coluna];

                                        //System.out.println("Matriz secundária: " + matrizMenor[i][j]);
                                        //System.out.print((i + 1) + " " + (j + 1) + " " + (z + 1) + " - ");
                                    }
                                    //System.out.println((i + 1) + " " + (j + 1) + " " + (z + 1));
                                    System.out.print(matrizMenor[linha][coluna] + " ");
                                    z2 = z;
                                    j2++;
                                }*/
     /*if(i != z2 && j != 0){
                                    System.out.println("");
                                }

                                d[linha] = ((matrizMenor[0][0] * matrizMenor[1][1] * matrizMenor[2][2]) + (matrizMenor[0][1] * matrizMenor[1][2] * matrizMenor[2][0]) + (matrizMenor[0][2] * matrizMenor[1][0] * matrizMenor[2][1])) - ((matrizMenor[2][0] * matrizMenor[1][1] * matrizMenor[0][2]) + (matrizMenor[2][1] * matrizMenor[1][2] * matrizMenor[0][0]) + (matrizMenor[2][2] * matrizMenor[1][0] * matrizMenor[0][1]));
                                //System.out.println("Menor complementar: " + d[i]);
                                //System.out.println("");
                            }

                            a[linha] = (Math.pow(-1, (1 + (1 + linha))) * d[linha]);
                            determinante += matriz[0][linha] * a[linha];
                            System.out.println("Cofator: " + a[linha] + " - Menor Complementar: " + d[linha]);

                        }
                        System.out.println("Determinante dessa matriz: " + determinante);*/
                    }
                }
            }
        } else{
            jLabel7.setText("A matriz deve ser quadrada (i = j)!");
        }
    }//GEN-LAST:event_determinante1ActionPerformed

    private void limpar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpar1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel newModel = new DefaultTableModel();
        jTable1.setModel(newModel);
        tInd1.setModel(newModel);
    }//GEN-LAST:event_limpar1ActionPerformed

    private void limpar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpar2ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel newModel = new DefaultTableModel();
        jTable2.setModel(newModel);
        tInd2.setModel(newModel);
    }//GEN-LAST:event_limpar2ActionPerformed

    private void multiplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiplicarActionPerformed
        // TODO add your handling code here:
        if (Integer.parseInt(ordemJ.getText()) == Integer.parseInt(ordemI2.getText())){
            double matriz1[][] = new double[Integer.parseInt(ordemI.getText())][Integer.parseInt(ordemJ.getText())];
            double matriz2[][] = new double[Integer.parseInt(ordemI2.getText())][Integer.parseInt(ordemJ2.getText())];
            double resultado[][] = new double[Integer.parseInt(ordemI.getText())][Integer.parseInt(ordemJ2.getText())];
            int ordemMI = Integer.parseInt(ordemI2.getText());
            int ordemMJ = Integer.parseInt(ordemJ2.getText());
            

            for (int i = 0; i < Integer.parseInt(ordemI.getText()); i++){
                for (int j = 0; j < Integer.parseInt(ordemJ.getText()); j++){
                    matriz1[i][j] = Double.parseDouble(jTable1.getValueAt(i, j).toString());
                }
            }
            
            for (int i = 0; i < Integer.parseInt(ordemI2.getText()); i++){
                for (int j = 0; j < Integer.parseInt(ordemJ2.getText()); j++){
                    matriz2[i][j] = Double.parseDouble(jTable2.getValueAt(i, j).toString());
                }
            }
            
            int aux =0;
            double p[]; p = new double[matriz1.length];
            double pf = 0;

            for (int cont = 0; cont< Integer.parseInt(ordemI.getText()); cont++){
                for (int cont2 = 0; cont2< ordemMJ; cont2++){
                    for (int cont3 = 0; cont3< ordemMI; cont3++){                  
                        p[cont3]= matriz1[cont][cont3] * matriz2[cont3][cont2];
                    }

                    for(int x = 0; x < matriz1.length; x++){
                        pf += p[x];
                    }
                    resultado[cont][cont2] = pf;
                    pf = 0;
                }
            }
            //System.out.println("");
            String resul = "<html><body>";
            for(int i = 0; i < Integer.parseInt(ordemI.getText()); i++){
                for(int j = 0; j < Integer.parseInt(ordemJ2.getText()); j++){
                    resul += resultado[i][j] + " ";
                }
                resul += "<br>";
            }
            resul += "</body></html>";
            jLabel3.setText(resul); 
        }else{
            jLabel7.setText("Os valores de j da matriz 1 e de i da matriz 2 devem ser iguais!");
        }
    }//GEN-LAST:event_multiplicarActionPerformed

    private void inversa2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inversa2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inversa2ActionPerformed

    private void cramer2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cramer2ActionPerformed
        // TODO add your handling code here:
        jScrollPane7.setVisible(true);
        calculoCramer2.setVisible(true);
        DefaultTableModel dtm = (DefaultTableModel) tInd2.getModel();
        dtm.addColumn("");
        for (int i = 0; i < Integer.parseInt(ordemI2.getText()); i++) {
            dtm.addRow(new Object[]{null});
        }
    }//GEN-LAST:event_cramer2ActionPerformed

    private void cramerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cramerActionPerformed
        // TODO add your handling code here:
        jScrollPane8.setVisible(true);
        calculoCramer.setVisible(true);
        DefaultTableModel dtm = (DefaultTableModel) tInd1.getModel();
        dtm.addColumn("");
        for (int i = 0; i < Integer.parseInt(ordemI.getText()); i++) {
            dtm.addRow(new Object[]{null});
        }
    }//GEN-LAST:event_cramerActionPerformed

    private void calculoCramerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculoCramerActionPerformed
        // TODO add your handling code here:
        if (Integer.parseInt(ordemI.getText()) == Integer.parseInt(ordemJ.getText())){
            double determinante = 0;
            //System.out.print("Digite a ordem da matriz (Determinante não pode ser tirada de uma matriz não quadrada): ");
            int ordem = Integer.parseInt(ordemI.getText());
            double a[] = new double[ordem];//Cofator
            //int matriz[][] = new int[ordem][ordem];
            double matriz[][] = new double[ordem][ordem];
            double d[] = new double[ordem];//Menor Complementar
            double matrizMenor[][] = new double[ordem][ordem];

            for (int i = 0; i < ordem; i++) {
                for (int j = 0; j < ordem; j++) {
                    //System.out.print("Digite o valor do elemento a" + (i + 1) + (j + 1) + ": ");
                    matriz[i][j] = Double.parseDouble(jTable1.getValueAt(i, j).toString());
                }
            }

            if (ordem == 2) {
                determinante = matriz[0][0] * matriz[1][1] - (matriz[0][1] * matriz[1][0]);

//                String resul = "<html><body><center>";
//                resul += determinante;
//                resul += "</center></body></html>";
//                //rMatriz1.setText(resul);
            } else {
                if (ordem == 3) {
                    determinante = ((matriz[0][0] * matriz[1][1] * matriz[2][2])
                            + (matriz[0][1] * matriz[1][2] * matriz[2][0])
                            + (matriz[0][2] * matriz[1][0] * matriz[2][1]))
                            - ((matriz[2][0] * matriz[1][1] * matriz[0][2])
                            + (matriz[2][1] * matriz[1][2] * matriz[0][0])
                            + (matriz[2][2] * matriz[1][0] * matriz[0][1]));
//                    String resul = "<html><body><center>";
//                    resul += determinante;
//                    resul += "</center></body></html>";
//                    rMatriz1.setText(resul);
                } else {
                    if (ordem >= 4) {
                        jLabel7.setText("Determinante de ordem acima de 4 indisponível!");
                        /*int z2 = 0;
                        for (int linha = 1; linha < ordemI; linha++) {
                            for (int coluna = 0; coluna < ordemI; coluna++) {
                                if (coluna == 0) {
                                    coluna++;
                                } else if (coluna == 1) {

                                } else if (coluna == 2) {

                                } else if (coluna == 3) {

                                }

                                matrizMenor[linha - 1][coluna - 1] = matriz[linha][coluna];
                                /*for(int z = 0; z < ordem; z++){
                                    if (linha != coluna && linha != 0 && coluna != 0 && i2 != 3 && j2 != 3){
                                        matrizMenor[i2][j2] = matriz[linha][coluna];

                                        //System.out.println("Matriz secundária: " + matrizMenor[i][j]);
                                        //System.out.print((i + 1) + " " + (j + 1) + " " + (z + 1) + " - ");
                                    }
                                    //System.out.println((i + 1) + " " + (j + 1) + " " + (z + 1));
                                    System.out.print(matrizMenor[linha][coluna] + " ");
                                    z2 = z;
                                    j2++;
                                }*/
     /*if(i != z2 && j != 0){
                                    System.out.println("");
                                }

                                d[linha] = ((matrizMenor[0][0] * matrizMenor[1][1] * matrizMenor[2][2]) + (matrizMenor[0][1] * matrizMenor[1][2] * matrizMenor[2][0]) + (matrizMenor[0][2] * matrizMenor[1][0] * matrizMenor[2][1])) - ((matrizMenor[2][0] * matrizMenor[1][1] * matrizMenor[0][2]) + (matrizMenor[2][1] * matrizMenor[1][2] * matrizMenor[0][0]) + (matrizMenor[2][2] * matrizMenor[1][0] * matrizMenor[0][1]));
                                //System.out.println("Menor complementar: " + d[i]);
                                //System.out.println("");
                            }

                            a[linha] = (Math.pow(-1, (1 + (1 + linha))) * d[linha]);
                            determinante += matriz[0][linha] * a[linha];
                            System.out.println("Cofator: " + a[linha] + " - Menor Complementar: " + d[linha]);

                        }
                        System.out.println("Determinante dessa matriz: " + determinante);*/
                    }
                }
            }
            double Max[][] = new double[matriz.length][matriz.length];
            double May[][] = new double[matriz.length][matriz.length];
            double Maz[][] = new double[matriz.length][matriz.length];
            double ind[] = new double[matriz.length];
            double DMax=0;
            double DMay=0;
            double DMaz=0;
            double x = 0;
            double y = 0;
            double z = 0;
            
            for(int i = 0; i < ordem; i++){
                ind[i] = Double.parseDouble(tInd1.getValueAt(i, 0).toString());
            }
            
            for(int cont =0;cont<matriz.length;cont++){
                for(int cont2 =0;cont2<matriz.length;cont2++){
                    //matriz Ax
                    if (cont == 0){
                        Max[cont2][cont] = ind[cont2]; 
                    }else{
                        Max[cont2][cont] = matriz[cont2][cont]; 
                    }
                    //matrizAy
                    if (cont == 1){
                        May[cont2][cont] = ind[cont2]; 
                    }else{
                        May[cont2][cont] = matriz[cont2][cont]; 
                    }
                    //matrizAz
                    if (cont == 2){
                        Maz[cont2][cont] = ind[cont2]; 
                    }else{
                        Maz[cont2][cont] = matriz[cont2][cont]; 
                    }
                }
            }
            //determinande Max__________________________________________________________________________________________________
        if(ordem == 2){
            DMax = Max[0][0] * Max[1][1] - (Max[0][1] * Max[1][0]);
            //System.out.println("Determinante dessa matriz: " + DMax);
        } else{
            if (ordem == 3){
                DMax = ((Max[0][0] * Max[1][1] * Max[2][2]) + (Max[0][1] * Max[1][2] * Max[2][0]) + (Max[0][2] * Max[1][0] * Max[2][1])) - ((Max[2][0] * Max[1][1] * Max[0][2]) + (Max[2][1] * Max[1][2] * Max[0][0]) + (Max[2][2] * Max[1][0] * Max[0][1]));
                //System.out.println("Determinante dessa matriz: " + DMax);
            }else{
                if (ordem >= 4) {
                        jLabel7.setText("Determinante de ordem acima de 4 indisponível!");
                        /*int z2 = 0;
                        for (int linha = 1; linha < ordemI; linha++) {
                            for (int coluna = 0; coluna < ordemI; coluna++) {
                                if (coluna == 0) {
                                    coluna++;
                                } else if (coluna == 1) {

                                } else if (coluna == 2) {

                                } else if (coluna == 3) {

                                }

                                matrizMenor[linha - 1][coluna - 1] = matriz[linha][coluna];
                                /*for(int z = 0; z < ordem; z++){
                                    if (linha != coluna && linha != 0 && coluna != 0 && i2 != 3 && j2 != 3){
                                        matrizMenor[i2][j2] = matriz[linha][coluna];

                                        //System.out.println("Matriz secundária: " + matrizMenor[i][j]);
                                        //System.out.print((i + 1) + " " + (j + 1) + " " + (z + 1) + " - ");
                                    }
                                    //System.out.println((i + 1) + " " + (j + 1) + " " + (z + 1));
                                    System.out.print(matrizMenor[linha][coluna] + " ");
                                    z2 = z;
                                    j2++;
                                }*/
     /*if(i != z2 && j != 0){
                                    System.out.println("");
                                }

                                d[linha] = ((matrizMenor[0][0] * matrizMenor[1][1] * matrizMenor[2][2]) + (matrizMenor[0][1] * matrizMenor[1][2] * matrizMenor[2][0]) + (matrizMenor[0][2] * matrizMenor[1][0] * matrizMenor[2][1])) - ((matrizMenor[2][0] * matrizMenor[1][1] * matrizMenor[0][2]) + (matrizMenor[2][1] * matrizMenor[1][2] * matrizMenor[0][0]) + (matrizMenor[2][2] * matrizMenor[1][0] * matrizMenor[0][1]));
                                //System.out.println("Menor complementar: " + d[i]);
                                //System.out.println("");
                            }

                            a[linha] = (Math.pow(-1, (1 + (1 + linha))) * d[linha]);
                            determinante += matriz[0][linha] * a[linha];
                            System.out.println("Cofator: " + a[linha] + " - Menor Complementar: " + d[linha]);

                        }
                        System.out.println("Determinante dessa matriz: " + determinante);*/
                    }
            }
        } 
        //determinande May__________________________________________________________________________________________________
        
        if(ordem == 2){
            DMay = May[0][0] * May[1][1] - (May[0][1] * May[1][0]);
            
            //System.out.println("Determinante dessa matriz: " + DMay);
        } else{
            if (ordem == 3){
                DMay = ((May[0][0] * May[1][1] * May[2][2]) + (May[0][1] * May[1][2] * May[2][0]) + (May[0][2] * May[1][0] * May[2][1])) - ((May[2][0] * May[1][1] * May[0][2]) + (May[2][1] * May[1][2] * May[0][0]) + (May[2][2] * May[1][0] * May[0][1]));
                //System.out.println("Determinante dessa matriz: " + DMay);
            }else{
                if (ordem >= 4) {
                        jLabel7.setText("Determinante de ordem acima de 4 indisponível!");
                        /*int z2 = 0;
                        for (int linha = 1; linha < ordemI; linha++) {
                            for (int coluna = 0; coluna < ordemI; coluna++) {
                                if (coluna == 0) {
                                    coluna++;
                                } else if (coluna == 1) {

                                } else if (coluna == 2) {

                                } else if (coluna == 3) {

                                }

                                matrizMenor[linha - 1][coluna - 1] = matriz[linha][coluna];
                                /*for(int z = 0; z < ordem; z++){
                                    if (linha != coluna && linha != 0 && coluna != 0 && i2 != 3 && j2 != 3){
                                        matrizMenor[i2][j2] = matriz[linha][coluna];

                                        //System.out.println("Matriz secundária: " + matrizMenor[i][j]);
                                        //System.out.print((i + 1) + " " + (j + 1) + " " + (z + 1) + " - ");
                                    }
                                    //System.out.println((i + 1) + " " + (j + 1) + " " + (z + 1));
                                    System.out.print(matrizMenor[linha][coluna] + " ");
                                    z2 = z;
                                    j2++;
                                }*/
     /*if(i != z2 && j != 0){
                                    System.out.println("");
                                }

                                d[linha] = ((matrizMenor[0][0] * matrizMenor[1][1] * matrizMenor[2][2]) + (matrizMenor[0][1] * matrizMenor[1][2] * matrizMenor[2][0]) + (matrizMenor[0][2] * matrizMenor[1][0] * matrizMenor[2][1])) - ((matrizMenor[2][0] * matrizMenor[1][1] * matrizMenor[0][2]) + (matrizMenor[2][1] * matrizMenor[1][2] * matrizMenor[0][0]) + (matrizMenor[2][2] * matrizMenor[1][0] * matrizMenor[0][1]));
                                //System.out.println("Menor complementar: " + d[i]);
                                //System.out.println("");
                            }

                            a[linha] = (Math.pow(-1, (1 + (1 + linha))) * d[linha]);
                            determinante += matriz[0][linha] * a[linha];
                            System.out.println("Cofator: " + a[linha] + " - Menor Complementar: " + d[linha]);

                        }
                        System.out.println("Determinante dessa matriz: " + determinante);*/
                    }
            }
        } 
        //determinande Maz__________________________________________________________________________________________________
        if(ordem == 2){
            DMaz = Maz[0][0] * Maz[1][1] - (Maz[0][1] * Maz[1][0]);
            
            //System.out.println("Determinante dessa matriz: " + DMaz);
        } else{
            if (ordem == 3){
                DMaz = ((Maz[0][0] * Maz[1][1] * Maz[2][2]) + (Maz[0][1] * Maz[1][2] * Maz[2][0]) + (Maz[0][2] * Maz[1][0] * Maz[2][1])) - ((Maz[2][0] * Maz[1][1] * Maz[0][2]) + (Maz[2][1] * Maz[1][2] * Maz[0][0]) + (Maz[2][2] * Maz[1][0] * Maz[0][1]));
                //System.out.println("Determinante dessa matriz: " + DMaz);
            }else{
                if (ordem >= 4) {
                        jLabel7.setText("Determinante de ordem acima de 4 indisponível!");
                        /*int z2 = 0;
                        for (int linha = 1; linha < ordemI; linha++) {
                            for (int coluna = 0; coluna < ordemI; coluna++) {
                                if (coluna == 0) {
                                    coluna++;
                                } else if (coluna == 1) {

                                } else if (coluna == 2) {

                                } else if (coluna == 3) {

                                }

                                matrizMenor[linha - 1][coluna - 1] = matriz[linha][coluna];
                                /*for(int z = 0; z < ordem; z++){
                                    if (linha != coluna && linha != 0 && coluna != 0 && i2 != 3 && j2 != 3){
                                        matrizMenor[i2][j2] = matriz[linha][coluna];

                                        //System.out.println("Matriz secundária: " + matrizMenor[i][j]);
                                        //System.out.print((i + 1) + " " + (j + 1) + " " + (z + 1) + " - ");
                                    }
                                    //System.out.println((i + 1) + " " + (j + 1) + " " + (z + 1));
                                    System.out.print(matrizMenor[linha][coluna] + " ");
                                    z2 = z;
                                    j2++;
                                }*/
     /*if(i != z2 && j != 0){
                                    System.out.println("");
                                }

                                d[linha] = ((matrizMenor[0][0] * matrizMenor[1][1] * matrizMenor[2][2]) + (matrizMenor[0][1] * matrizMenor[1][2] * matrizMenor[2][0]) + (matrizMenor[0][2] * matrizMenor[1][0] * matrizMenor[2][1])) - ((matrizMenor[2][0] * matrizMenor[1][1] * matrizMenor[0][2]) + (matrizMenor[2][1] * matrizMenor[1][2] * matrizMenor[0][0]) + (matrizMenor[2][2] * matrizMenor[1][0] * matrizMenor[0][1]));
                                //System.out.println("Menor complementar: " + d[i]);
                                //System.out.println("");
                            }

                            a[linha] = (Math.pow(-1, (1 + (1 + linha))) * d[linha]);
                            determinante += matriz[0][linha] * a[linha];
                            System.out.println("Cofator: " + a[linha] + " - Menor Complementar: " + d[linha]);

                        }
                        System.out.println("Determinante dessa matriz: " + determinante);*/
                    }
            }
        } 
        //-__________________________________________________________________________________________________________________
        x = DMax / determinante;
        y = DMay / determinante;       
        String resul = "<html><body>";
        if (ordem == 3){
            z = DMaz / determinante;
            resul += "X: " + x + "<br>Y: " + y + "<br>Z: " + z;    
        }else if(ordem ==2){
            resul += "X: " + x + "<br>Y: " + y;
        }else if(ordem >= 4){
            resul += "Impossível determinar, pois cálculo <br>de determinante de ordem 4 ou maior <br>não está disponível ainda.";
        }       
        resul += "</body></html>";
        rMatriz1.setText(resul);
        } else{
            jLabel7.setText("A matriz deve ser quadrada (i = j)!");
        }
    }//GEN-LAST:event_calculoCramerActionPerformed

    private void calculoCramer2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculoCramer2ActionPerformed
        // TODO add your handling code here:
        if (Integer.parseInt(ordemI2.getText()) == Integer.parseInt(ordemJ2.getText())){
            double determinante = 0;
            //System.out.print("Digite a ordem da matriz (Determinante não pode ser tirada de uma matriz não quadrada): ");
            int ordem = Integer.parseInt(ordemI2.getText());
            double a[] = new double[ordem];//Cofator
            //int matriz[][] = new int[ordem][ordem];
            double matriz[][] = new double[ordem][ordem];
            double d[] = new double[ordem];//Menor Complementar
            double matrizMenor[][] = new double[ordem][ordem];

            for (int i = 0; i < ordem; i++) {
                for (int j = 0; j < ordem; j++) {
                    //System.out.print("Digite o valor do elemento a" + (i + 1) + (j + 1) + ": ");
                    matriz[i][j] = Double.parseDouble(jTable2.getValueAt(i, j).toString());
                }
            }

            if (ordem == 2) {
                determinante = matriz[0][0] * matriz[1][1] - (matriz[0][1] * matriz[1][0]);

//                String resul = "<html><body><center>";
//                resul += determinante;
//                resul += "</center></body></html>";
//                rMatriz1.setText(resul);
            } else {
                if (ordem == 3) {
                    determinante = ((matriz[0][0] * matriz[1][1] * matriz[2][2])
                            + (matriz[0][1] * matriz[1][2] * matriz[2][0])
                            + (matriz[0][2] * matriz[1][0] * matriz[2][1]))
                            - ((matriz[2][0] * matriz[1][1] * matriz[0][2])
                            + (matriz[2][1] * matriz[1][2] * matriz[0][0])
                            + (matriz[2][2] * matriz[1][0] * matriz[0][1]));
//                    String resul = "<html><body><center>";
//                    resul += determinante;
//                    resul += "</center></body></html>";
//                    rMatriz1.setText(resul);
                } else {
                    if (ordem >= 4) {
                        jLabel7.setText("Determinante de ordem acima de 4 indisponível!");
                        /*int z2 = 0;
                        for (int linha = 1; linha < ordemI; linha++) {
                            for (int coluna = 0; coluna < ordemI; coluna++) {
                                if (coluna == 0) {
                                    coluna++;
                                } else if (coluna == 1) {

                                } else if (coluna == 2) {

                                } else if (coluna == 3) {

                                }

                                matrizMenor[linha - 1][coluna - 1] = matriz[linha][coluna];
                                /*for(int z = 0; z < ordem; z++){
                                    if (linha != coluna && linha != 0 && coluna != 0 && i2 != 3 && j2 != 3){
                                        matrizMenor[i2][j2] = matriz[linha][coluna];

                                        //System.out.println("Matriz secundária: " + matrizMenor[i][j]);
                                        //System.out.print((i + 1) + " " + (j + 1) + " " + (z + 1) + " - ");
                                    }
                                    //System.out.println((i + 1) + " " + (j + 1) + " " + (z + 1));
                                    System.out.print(matrizMenor[linha][coluna] + " ");
                                    z2 = z;
                                    j2++;
                                }*/
     /*if(i != z2 && j != 0){
                                    System.out.println("");
                                }

                                d[linha] = ((matrizMenor[0][0] * matrizMenor[1][1] * matrizMenor[2][2]) + (matrizMenor[0][1] * matrizMenor[1][2] * matrizMenor[2][0]) + (matrizMenor[0][2] * matrizMenor[1][0] * matrizMenor[2][1])) - ((matrizMenor[2][0] * matrizMenor[1][1] * matrizMenor[0][2]) + (matrizMenor[2][1] * matrizMenor[1][2] * matrizMenor[0][0]) + (matrizMenor[2][2] * matrizMenor[1][0] * matrizMenor[0][1]));
                                //System.out.println("Menor complementar: " + d[i]);
                                //System.out.println("");
                            }

                            a[linha] = (Math.pow(-1, (1 + (1 + linha))) * d[linha]);
                            determinante += matriz[0][linha] * a[linha];
                            System.out.println("Cofator: " + a[linha] + " - Menor Complementar: " + d[linha]);

                        }
                        System.out.println("Determinante dessa matriz: " + determinante);*/
                    }
                }
            }
            double Max[][] = new double[matriz.length][matriz.length];
            double May[][] = new double[matriz.length][matriz.length];
            double Maz[][] = new double[matriz.length][matriz.length];
            double ind[] = new double[matriz.length];
            double DMax=0;
            double DMay=0;
            double DMaz=0;
            double x = 0;
            double y = 0;
            double z = 0;
            
            for(int i = 0; i < ordem; i++){
                ind[i] = Double.parseDouble(tInd2.getValueAt(i, 0).toString());
            }
            
            for(int cont = 0; cont < matriz.length; cont++){
                for(int cont2 =0; cont2 < matriz.length; cont2++){
                    //matriz Ax
                    if (cont == 0){
                        Max[cont2][cont] = ind[cont2]; 
                    }else{
                        Max[cont2][cont] = matriz[cont2][cont]; 
                    }
                    //matrizAy
                    if (cont == 1){
                        May[cont2][cont] = ind[cont2]; 
                    }else{
                        May[cont2][cont] = matriz[cont2][cont]; 
                    }
                    //matrizAz
                    if (cont == 2){
                        Maz[cont2][cont] = ind[cont2]; 
                    }else{
                        Maz[cont2][cont] = matriz[cont2][cont]; 
                    }
                }
            }
            //determinande Max__________________________________________________________________________________________________
        if(ordem == 2){
            DMax = Max[0][0] * Max[1][1] - (Max[0][1] * Max[1][0]);
            //System.out.println("Determinante dessa matriz: " + DMax);
        } else{
            if (ordem == 3){
                DMax = ((Max[0][0] * Max[1][1] * Max[2][2]) + (Max[0][1] * Max[1][2] * Max[2][0]) + (Max[0][2] * Max[1][0] * Max[2][1])) - ((Max[2][0] * Max[1][1] * Max[0][2]) + (Max[2][1] * Max[1][2] * Max[0][0]) + (Max[2][2] * Max[1][0] * Max[0][1]));
                //System.out.println("Determinante dessa matriz: " + DMax);
            }else{
                if (ordem >= 4) {
                        jLabel7.setText("Determinante de ordem acima de 4 indisponível!");
                        /*int z2 = 0;
                        for (int linha = 1; linha < ordemI; linha++) {
                            for (int coluna = 0; coluna < ordemI; coluna++) {
                                if (coluna == 0) {
                                    coluna++;
                                } else if (coluna == 1) {

                                } else if (coluna == 2) {

                                } else if (coluna == 3) {

                                }

                                matrizMenor[linha - 1][coluna - 1] = matriz[linha][coluna];
                                /*for(int z = 0; z < ordem; z++){
                                    if (linha != coluna && linha != 0 && coluna != 0 && i2 != 3 && j2 != 3){
                                        matrizMenor[i2][j2] = matriz[linha][coluna];

                                        //System.out.println("Matriz secundária: " + matrizMenor[i][j]);
                                        //System.out.print((i + 1) + " " + (j + 1) + " " + (z + 1) + " - ");
                                    }
                                    //System.out.println((i + 1) + " " + (j + 1) + " " + (z + 1));
                                    System.out.print(matrizMenor[linha][coluna] + " ");
                                    z2 = z;
                                    j2++;
                                }*/
     /*if(i != z2 && j != 0){
                                    System.out.println("");
                                }

                                d[linha] = ((matrizMenor[0][0] * matrizMenor[1][1] * matrizMenor[2][2]) + (matrizMenor[0][1] * matrizMenor[1][2] * matrizMenor[2][0]) + (matrizMenor[0][2] * matrizMenor[1][0] * matrizMenor[2][1])) - ((matrizMenor[2][0] * matrizMenor[1][1] * matrizMenor[0][2]) + (matrizMenor[2][1] * matrizMenor[1][2] * matrizMenor[0][0]) + (matrizMenor[2][2] * matrizMenor[1][0] * matrizMenor[0][1]));
                                //System.out.println("Menor complementar: " + d[i]);
                                //System.out.println("");
                            }

                            a[linha] = (Math.pow(-1, (1 + (1 + linha))) * d[linha]);
                            determinante += matriz[0][linha] * a[linha];
                            System.out.println("Cofator: " + a[linha] + " - Menor Complementar: " + d[linha]);

                        }
                        System.out.println("Determinante dessa matriz: " + determinante);*/
                    }
            }
        } 
        //determinande May__________________________________________________________________________________________________
        
        if(ordem == 2){
            DMay = May[0][0] * May[1][1] - (May[0][1] * May[1][0]);
            
            //System.out.println("Determinante dessa matriz: " + DMay);
        } else{
            if (ordem == 3){
                DMay = ((May[0][0] * May[1][1] * May[2][2]) + (May[0][1] * May[1][2] * May[2][0]) + (May[0][2] * May[1][0] * May[2][1])) - ((May[2][0] * May[1][1] * May[0][2]) + (May[2][1] * May[1][2] * May[0][0]) + (May[2][2] * May[1][0] * May[0][1]));
                //System.out.println("Determinante dessa matriz: " + DMay);
            }else{
                if (ordem >= 4) {
                        jLabel7.setText("Determinante de ordem acima de 4 indisponível!");
                        /*int z2 = 0;
                        for (int linha = 1; linha < ordemI; linha++) {
                            for (int coluna = 0; coluna < ordemI; coluna++) {
                                if (coluna == 0) {
                                    coluna++;
                                } else if (coluna == 1) {

                                } else if (coluna == 2) {

                                } else if (coluna == 3) {

                                }

                                matrizMenor[linha - 1][coluna - 1] = matriz[linha][coluna];
                                /*for(int z = 0; z < ordem; z++){
                                    if (linha != coluna && linha != 0 && coluna != 0 && i2 != 3 && j2 != 3){
                                        matrizMenor[i2][j2] = matriz[linha][coluna];

                                        //System.out.println("Matriz secundária: " + matrizMenor[i][j]);
                                        //System.out.print((i + 1) + " " + (j + 1) + " " + (z + 1) + " - ");
                                    }
                                    //System.out.println((i + 1) + " " + (j + 1) + " " + (z + 1));
                                    System.out.print(matrizMenor[linha][coluna] + " ");
                                    z2 = z;
                                    j2++;
                                }*/
     /*if(i != z2 && j != 0){
                                    System.out.println("");
                                }

                                d[linha] = ((matrizMenor[0][0] * matrizMenor[1][1] * matrizMenor[2][2]) + (matrizMenor[0][1] * matrizMenor[1][2] * matrizMenor[2][0]) + (matrizMenor[0][2] * matrizMenor[1][0] * matrizMenor[2][1])) - ((matrizMenor[2][0] * matrizMenor[1][1] * matrizMenor[0][2]) + (matrizMenor[2][1] * matrizMenor[1][2] * matrizMenor[0][0]) + (matrizMenor[2][2] * matrizMenor[1][0] * matrizMenor[0][1]));
                                //System.out.println("Menor complementar: " + d[i]);
                                //System.out.println("");
                            }

                            a[linha] = (Math.pow(-1, (1 + (1 + linha))) * d[linha]);
                            determinante += matriz[0][linha] * a[linha];
                            System.out.println("Cofator: " + a[linha] + " - Menor Complementar: " + d[linha]);

                        }
                        System.out.println("Determinante dessa matriz: " + determinante);*/
                    }
            }
        } 
        //determinande Maz__________________________________________________________________________________________________
        if(ordem == 2){
            DMaz = Maz[0][0] * Maz[1][1] - (Maz[0][1] * Maz[1][0]);
            
            //System.out.println("Determinante dessa matriz: " + DMaz);
        } else{
            if (ordem == 3){
                DMaz = ((Maz[0][0] * Maz[1][1] * Maz[2][2]) + (Maz[0][1] * Maz[1][2] * Maz[2][0]) + (Maz[0][2] * Maz[1][0] * Maz[2][1])) - ((Maz[2][0] * Maz[1][1] * Maz[0][2]) + (Maz[2][1] * Maz[1][2] * Maz[0][0]) + (Maz[2][2] * Maz[1][0] * Maz[0][1]));
                //System.out.println("Determinante dessa matriz: " + DMaz);
            }else{
                if (ordem >= 4) {
                        jLabel7.setText("Determinante de ordem acima de 4 indisponível!");
                        /*int z2 = 0;
                        for (int linha = 1; linha < ordemI; linha++) {
                            for (int coluna = 0; coluna < ordemI; coluna++) {
                                if (coluna == 0) {
                                    coluna++;
                                } else if (coluna == 1) {

                                } else if (coluna == 2) {

                                } else if (coluna == 3) {

                                }

                                matrizMenor[linha - 1][coluna - 1] = matriz[linha][coluna];
                                /*for(int z = 0; z < ordem; z++){
                                    if (linha != coluna && linha != 0 && coluna != 0 && i2 != 3 && j2 != 3){
                                        matrizMenor[i2][j2] = matriz[linha][coluna];

                                        //System.out.println("Matriz secundária: " + matrizMenor[i][j]);
                                        //System.out.print((i + 1) + " " + (j + 1) + " " + (z + 1) + " - ");
                                    }
                                    //System.out.println((i + 1) + " " + (j + 1) + " " + (z + 1));
                                    System.out.print(matrizMenor[linha][coluna] + " ");
                                    z2 = z;
                                    j2++;
                                }*/
     /*if(i != z2 && j != 0){
                                    System.out.println("");
                                }

                                d[linha] = ((matrizMenor[0][0] * matrizMenor[1][1] * matrizMenor[2][2]) + (matrizMenor[0][1] * matrizMenor[1][2] * matrizMenor[2][0]) + (matrizMenor[0][2] * matrizMenor[1][0] * matrizMenor[2][1])) - ((matrizMenor[2][0] * matrizMenor[1][1] * matrizMenor[0][2]) + (matrizMenor[2][1] * matrizMenor[1][2] * matrizMenor[0][0]) + (matrizMenor[2][2] * matrizMenor[1][0] * matrizMenor[0][1]));
                                //System.out.println("Menor complementar: " + d[i]);
                                //System.out.println("");
                            }

                            a[linha] = (Math.pow(-1, (1 + (1 + linha))) * d[linha]);
                            determinante += matriz[0][linha] * a[linha];
                            System.out.println("Cofator: " + a[linha] + " - Menor Complementar: " + d[linha]);

                        }
                        System.out.println("Determinante dessa matriz: " + determinante);*/
                    }
            }
        } 
        //-__________________________________________________________________________________________________________________
        x = DMax / determinante;
        y = DMay / determinante;       
        String resul = "<html><body>";
        if (ordem == 3){
            z = DMaz / determinante;
            resul += "X: " + x + " - Y: " + y + " - Z: " + z;    
        }else if(ordem ==2){
            resul += "X: " + x + " - Y: " + y;
        }else if(ordem >= 4){
            resul += "Impossível determinar, pois cálculo <br>de determinante de ordem 4 ou maior <br>não está disponível ainda.";
        }       
        resul += "</body></html>";
        rMatriz2.setText(resul);
        } else{
            jLabel7.setText("A matriz deve ser quadrada (i = j)!");
        }
    }//GEN-LAST:event_calculoCramer2ActionPerformed

    private void trocarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trocarActionPerformed
        // TODO add your handling code here:
        double matriz1[][] = new double[Integer.parseInt(ordemI2.getText())][Integer.parseInt(ordemJ2.getText())];
        double matriz2[][] = new double[Integer.parseInt(ordemI.getText())][Integer.parseInt(ordemJ.getText())];
        for (int i = 0; i < Integer.parseInt(ordemI2.getText()); i++) {
            for (int j = 0; j < Integer.parseInt(ordemJ2.getText()); j++) {
                matriz1[i][j] = Double.parseDouble(jTable2.getValueAt(i, j).toString());                
            }
        }        
        for (int i = 0; i < Integer.parseInt(ordemI.getText()); i++) {
            for (int j = 0; j < Integer.parseInt(ordemJ.getText()); j++) {
                matriz2[i][j] = Double.parseDouble(jTable1.getValueAt(i, j).toString());
            }
        }
        
        DefaultTableModel newModel = new DefaultTableModel();
        DefaultTableModel newModel2 = new DefaultTableModel();
        jTable1.setModel(newModel);
        jTable2.setModel(newModel2);
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        DefaultTableModel dtm2 = (DefaultTableModel) jTable2.getModel();
        for (int i = 0; i < Integer.parseInt(ordemJ2.getText()); i++) {
            dtm.addColumn("");
        }
        for (int i = 0; i < Integer.parseInt(ordemI2.getText()); i++) {
            dtm.addRow(new Object[]{null});
        }
        
        for (int i = 0; i < Integer.parseInt(ordemJ.getText()); i++) {
            dtm2.addColumn("");
        }
        for (int i = 0; i < Integer.parseInt(ordemI.getText()); i++) {
            dtm2.addRow(new Object[]{null});
        }
        
        for (int i = 0; i < Integer.parseInt(ordemI2.getText()); i++) {
            for (int j = 0; j < Integer.parseInt(ordemJ2.getText()); j++) {
                jTable1.setValueAt(matriz1[i][j], i, j);
            }
        }
        
        for (int i = 0; i < Integer.parseInt(ordemI.getText()); i++) {
            for (int j = 0; j < Integer.parseInt(ordemJ.getText()); j++) {
                jTable2.setValueAt(matriz2[i][j], i, j);
            }
        }
    }//GEN-LAST:event_trocarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaMatrizes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaMatrizes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaMatrizes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaMatrizes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaMatrizes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calculoCramer;
    private javax.swing.JButton calculoCramer2;
    private javax.swing.JButton cramer;
    private javax.swing.JButton cramer2;
    private javax.swing.JButton determinante1;
    private javax.swing.JButton determinante2;
    private javax.swing.JButton gerador;
    private javax.swing.JButton gerador2;
    private javax.swing.JButton inversa1;
    private javax.swing.JButton inversa2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton limpar1;
    private javax.swing.JButton limpar2;
    private javax.swing.JButton multiplicar;
    private javax.swing.JTextField ordemI;
    private javax.swing.JTextField ordemI2;
    private javax.swing.JTextField ordemJ;
    private javax.swing.JTextField ordemJ2;
    private javax.swing.JLabel rMatriz1;
    private javax.swing.JLabel rMatriz2;
    private javax.swing.JButton somar;
    private javax.swing.JButton subtrair;
    private javax.swing.JTable tInd1;
    private javax.swing.JTable tInd2;
    private javax.swing.JButton transposta1;
    private javax.swing.JButton transposta2;
    private javax.swing.JButton trocar;
    // End of variables declaration//GEN-END:variables
}
